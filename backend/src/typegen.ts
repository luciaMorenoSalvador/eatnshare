/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  AuthProvider: "GOOGLE" | "OWN"
  Role: "ADMIN" | "USER"
  VideoProvider: "YOUTUBE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Date: any
}

export interface NexusGenObjects {
  ChefProfile: { // root type
    name: string; // String!
    stars: number; // Int!
    userId: string; // String!
    username: string; // ID!
  }
  Ingredient: { // root type
    name: string; // String!
    quantity: string; // String!
    recipeId: string; // String!
  }
  Mutation: {};
  ProfilePhoto: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
    profileUsername: string; // String!
  }
  ProfileReport: { // root type
    authorUsername: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    reason: string; // String!
    reportedUsername: string; // String!
  }
  Query: {};
  Rating: { // root type
    authorUsername: string; // String!
    rating: number; // Int!
    recipeId: string; // String!
  }
  Recipe: { // root type
    authorUsername: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  RecipePhoto: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
    recipeId: string; // String!
  }
  RecipeReport: { // root type
    authorUsername: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    reason: string; // String!
    recipeId: string; // String!
  }
  Step: { // root type
    description: string; // String!
    number: number; // Int!
    recipeId: string; // String!
  }
  StepPhoto: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
    recipeId: string; // String!
    stepNumber: number; // Int!
  }
  StepTimer: { // root type
    recipeId: string; // String!
    seconds: NexusGenScalars['BigInt']; // BigInt!
    stepNumber: number; // Int!
  }
  StepTool: { // root type
    description: string; // String!
    link: string; // String!
    recipeId: string; // String!
    stepNumber: number; // Int!
  }
  StepVideoMarker: { // root type
    recipeId: string; // String!
    seconds: NexusGenScalars['BigInt']; // BigInt!
    stepNumber: number; // Int!
    videoId: string; // String!
  }
  User: { // root type
    authProvider: NexusGenEnums['AuthProvider']; // AuthProvider!
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    id: string; // ID!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  UserProfile: { // root type
    name: string; // String!
    userId: string; // String!
    username: string; // ID!
  }
  UserToken: { // root type
    accessToken: string; // String!
    device: string; // String!
    id: string; // ID!
    lastUsedAt: NexusGenScalars['Date']; // Date!
    userId: string; // String!
  }
  Video: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    provider: NexusGenEnums['VideoProvider']; // VideoProvider!
    video: string; // String!
  }
}

export interface NexusGenInterfaces {
  Photo: NexusGenRootTypes['ProfilePhoto'] | NexusGenRootTypes['RecipePhoto'] | NexusGenRootTypes['StepPhoto'];
  Profile: NexusGenRootTypes['ChefProfile'] | NexusGenRootTypes['UserProfile'];
  Report: NexusGenRootTypes['ProfileReport'] | NexusGenRootTypes['RecipeReport'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  ChefProfile: { // field return type
    createdProfileReports: NexusGenRootTypes['ProfileReport'][]; // [ProfileReport!]!
    createdRecipeReports: NexusGenRootTypes['RecipeReport'][]; // [RecipeReport!]!
    favoriteRecipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    name: string; // String!
    photo: NexusGenRootTypes['ProfilePhoto'] | null; // ProfilePhoto
    profileReports: NexusGenRootTypes['ProfileReport'][]; // [ProfileReport!]!
    recipeRatings: NexusGenRootTypes['Rating'][]; // [Rating!]!
    recipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    stars: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    username: string; // ID!
  }
  Ingredient: { // field return type
    name: string; // String!
    quantity: string; // String!
    recipe: NexusGenRootTypes['Recipe']; // Recipe!
    recipeId: string; // String!
  }
  Mutation: { // field return type
    authenticate: NexusGenRootTypes['UserToken'] | null; // UserToken
    createAccount: NexusGenRootTypes['UserToken'] | null; // UserToken
  }
  ProfilePhoto: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    downloadLink: string; // String!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
    profile: NexusGenRootTypes['Profile']; // Profile!
    profileUsername: string; // String!
  }
  ProfileReport: { // field return type
    author: NexusGenRootTypes['Profile']; // Profile!
    authorUsername: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    reason: string; // String!
    reported: NexusGenRootTypes['Profile']; // Profile!
    reportedUsername: string; // String!
  }
  Query: { // field return type
    getUserById: NexusGenRootTypes['User'] | null; // User
    getUsers: NexusGenRootTypes['User'][]; // [User!]!
  }
  Rating: { // field return type
    author: NexusGenRootTypes['Profile']; // Profile!
    authorUsername: string; // String!
    rating: number; // Int!
    recipe: NexusGenRootTypes['Recipe']; // Recipe!
    recipeId: string; // String!
  }
  Recipe: { // field return type
    author: NexusGenRootTypes['Profile']; // Profile!
    authorUsername: string; // String!
    averageRating: number; // Float!
    createdAt: NexusGenScalars['Date']; // Date!
    favoritesOf: NexusGenRootTypes['Profile'][]; // [Profile!]!
    id: string; // ID!
    ingredients: NexusGenRootTypes['Ingredient'][]; // [Ingredient!]!
    photos: NexusGenRootTypes['RecipePhoto'][]; // [RecipePhoto!]!
    ratings: NexusGenRootTypes['Rating'][]; // [Rating!]!
    reports: NexusGenRootTypes['RecipeReport'][]; // [RecipeReport!]!
    steps: NexusGenRootTypes['Step'][]; // [Step!]!
    updatedAt: NexusGenScalars['Date']; // Date!
    video: NexusGenRootTypes['Video'] | null; // Video
  }
  RecipePhoto: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    downloadLink: string; // String!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
    recipe: NexusGenRootTypes['Recipe']; // Recipe!
    recipeId: string; // String!
  }
  RecipeReport: { // field return type
    author: NexusGenRootTypes['Profile']; // Profile!
    authorUsername: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    reason: string; // String!
    recipe: NexusGenRootTypes['Recipe']; // Recipe!
    recipeId: string; // String!
  }
  Step: { // field return type
    description: string; // String!
    number: number; // Int!
    photos: NexusGenRootTypes['StepPhoto'][]; // [StepPhoto!]!
    recipe: NexusGenRootTypes['Recipe']; // Recipe!
    recipeId: string; // String!
    timer: NexusGenRootTypes['StepTimer'] | null; // StepTimer
    tool: NexusGenRootTypes['StepTool'] | null; // StepTool
    videoMarker: NexusGenRootTypes['StepVideoMarker'] | null; // StepVideoMarker
  }
  StepPhoto: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    downloadLink: string; // String!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
    recipe: NexusGenRootTypes['Recipe']; // Recipe!
    recipeId: string; // String!
    step: NexusGenRootTypes['Step']; // Step!
    stepNumber: number; // Int!
  }
  StepTimer: { // field return type
    recipeId: string; // String!
    seconds: NexusGenScalars['BigInt']; // BigInt!
    step: NexusGenRootTypes['Step']; // Step!
    stepNumber: number; // Int!
  }
  StepTool: { // field return type
    description: string; // String!
    link: string; // String!
    recipeId: string; // String!
    step: NexusGenRootTypes['Step']; // Step!
    stepNumber: number; // Int!
  }
  StepVideoMarker: { // field return type
    recipeId: string; // String!
    seconds: NexusGenScalars['BigInt']; // BigInt!
    step: NexusGenRootTypes['Step']; // Step!
    stepNumber: number; // Int!
    video: NexusGenRootTypes['Video']; // Video!
    videoId: string; // String!
  }
  User: { // field return type
    authProvider: NexusGenEnums['AuthProvider']; // AuthProvider!
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    id: string; // ID!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['Date']; // Date!
    userTokens: NexusGenRootTypes['UserToken'][]; // [UserToken!]!
  }
  UserProfile: { // field return type
    createdProfileReports: NexusGenRootTypes['ProfileReport'][]; // [ProfileReport!]!
    createdRecipeReports: NexusGenRootTypes['RecipeReport'][]; // [RecipeReport!]!
    favoriteRecipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    name: string; // String!
    photo: NexusGenRootTypes['ProfilePhoto'] | null; // ProfilePhoto
    profileReports: NexusGenRootTypes['ProfileReport'][]; // [ProfileReport!]!
    recipeRatings: NexusGenRootTypes['Rating'][]; // [Rating!]!
    recipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    username: string; // ID!
  }
  UserToken: { // field return type
    accessToken: string; // String!
    device: string; // String!
    id: string; // ID!
    lastUsedAt: NexusGenScalars['Date']; // Date!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Video: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    provider: NexusGenEnums['VideoProvider']; // VideoProvider!
    video: string; // String!
  }
  Photo: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    downloadLink: string; // String!
    id: string; // ID!
    md5: string; // String!
    mimeType: string; // String!
  }
  Profile: { // field return type
    createdProfileReports: NexusGenRootTypes['ProfileReport'][]; // [ProfileReport!]!
    createdRecipeReports: NexusGenRootTypes['RecipeReport'][]; // [RecipeReport!]!
    favoriteRecipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    name: string; // String!
    photo: NexusGenRootTypes['ProfilePhoto'] | null; // ProfilePhoto
    profileReports: NexusGenRootTypes['ProfileReport'][]; // [ProfileReport!]!
    recipeRatings: NexusGenRootTypes['Rating'][]; // [Rating!]!
    recipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    username: string; // ID!
  }
  Report: { // field return type
    author: NexusGenRootTypes['Profile']; // Profile!
    authorUsername: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    reason: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  ChefProfile: { // field return type name
    createdProfileReports: 'ProfileReport'
    createdRecipeReports: 'RecipeReport'
    favoriteRecipes: 'Recipe'
    name: 'String'
    photo: 'ProfilePhoto'
    profileReports: 'ProfileReport'
    recipeRatings: 'Rating'
    recipes: 'Recipe'
    stars: 'Int'
    user: 'User'
    userId: 'String'
    username: 'ID'
  }
  Ingredient: { // field return type name
    name: 'String'
    quantity: 'String'
    recipe: 'Recipe'
    recipeId: 'String'
  }
  Mutation: { // field return type name
    authenticate: 'UserToken'
    createAccount: 'UserToken'
  }
  ProfilePhoto: { // field return type name
    createdAt: 'Date'
    downloadLink: 'String'
    id: 'ID'
    md5: 'String'
    mimeType: 'String'
    profile: 'Profile'
    profileUsername: 'String'
  }
  ProfileReport: { // field return type name
    author: 'Profile'
    authorUsername: 'String'
    createdAt: 'Date'
    id: 'ID'
    reason: 'String'
    reported: 'Profile'
    reportedUsername: 'String'
  }
  Query: { // field return type name
    getUserById: 'User'
    getUsers: 'User'
  }
  Rating: { // field return type name
    author: 'Profile'
    authorUsername: 'String'
    rating: 'Int'
    recipe: 'Recipe'
    recipeId: 'String'
  }
  Recipe: { // field return type name
    author: 'Profile'
    authorUsername: 'String'
    averageRating: 'Float'
    createdAt: 'Date'
    favoritesOf: 'Profile'
    id: 'ID'
    ingredients: 'Ingredient'
    photos: 'RecipePhoto'
    ratings: 'Rating'
    reports: 'RecipeReport'
    steps: 'Step'
    updatedAt: 'Date'
    video: 'Video'
  }
  RecipePhoto: { // field return type name
    createdAt: 'Date'
    downloadLink: 'String'
    id: 'ID'
    md5: 'String'
    mimeType: 'String'
    recipe: 'Recipe'
    recipeId: 'String'
  }
  RecipeReport: { // field return type name
    author: 'Profile'
    authorUsername: 'String'
    createdAt: 'Date'
    id: 'ID'
    reason: 'String'
    recipe: 'Recipe'
    recipeId: 'String'
  }
  Step: { // field return type name
    description: 'String'
    number: 'Int'
    photos: 'StepPhoto'
    recipe: 'Recipe'
    recipeId: 'String'
    timer: 'StepTimer'
    tool: 'StepTool'
    videoMarker: 'StepVideoMarker'
  }
  StepPhoto: { // field return type name
    createdAt: 'Date'
    downloadLink: 'String'
    id: 'ID'
    md5: 'String'
    mimeType: 'String'
    recipe: 'Recipe'
    recipeId: 'String'
    step: 'Step'
    stepNumber: 'Int'
  }
  StepTimer: { // field return type name
    recipeId: 'String'
    seconds: 'BigInt'
    step: 'Step'
    stepNumber: 'Int'
  }
  StepTool: { // field return type name
    description: 'String'
    link: 'String'
    recipeId: 'String'
    step: 'Step'
    stepNumber: 'Int'
  }
  StepVideoMarker: { // field return type name
    recipeId: 'String'
    seconds: 'BigInt'
    step: 'Step'
    stepNumber: 'Int'
    video: 'Video'
    videoId: 'String'
  }
  User: { // field return type name
    authProvider: 'AuthProvider'
    createdAt: 'Date'
    email: 'String'
    id: 'ID'
    profile: 'Profile'
    role: 'Role'
    updatedAt: 'Date'
    userTokens: 'UserToken'
  }
  UserProfile: { // field return type name
    createdProfileReports: 'ProfileReport'
    createdRecipeReports: 'RecipeReport'
    favoriteRecipes: 'Recipe'
    name: 'String'
    photo: 'ProfilePhoto'
    profileReports: 'ProfileReport'
    recipeRatings: 'Rating'
    recipes: 'Recipe'
    user: 'User'
    userId: 'String'
    username: 'ID'
  }
  UserToken: { // field return type name
    accessToken: 'String'
    device: 'String'
    id: 'ID'
    lastUsedAt: 'Date'
    user: 'User'
    userId: 'String'
  }
  Video: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    provider: 'VideoProvider'
    video: 'String'
  }
  Photo: { // field return type name
    createdAt: 'Date'
    downloadLink: 'String'
    id: 'ID'
    md5: 'String'
    mimeType: 'String'
  }
  Profile: { // field return type name
    createdProfileReports: 'ProfileReport'
    createdRecipeReports: 'RecipeReport'
    favoriteRecipes: 'Recipe'
    name: 'String'
    photo: 'ProfilePhoto'
    profileReports: 'ProfileReport'
    recipeRatings: 'Rating'
    recipes: 'Recipe'
    user: 'User'
    userId: 'String'
    username: 'ID'
  }
  Report: { // field return type name
    author: 'Profile'
    authorUsername: 'String'
    createdAt: 'Date'
    id: 'ID'
    reason: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authenticate: { // args
      email: string; // String!
      idToken?: string | null; // String
      password?: string | null; // String
    }
    createAccount: { // args
      authProvider?: NexusGenEnums['AuthProvider'] | null; // AuthProvider
      email: string; // String!
      password?: string | null; // String
    }
  }
  Query: {
    getUserById: { // args
      userId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Photo: "ProfilePhoto" | "RecipePhoto" | "StepPhoto"
  Profile: "ChefProfile" | "UserProfile"
  Report: "ProfileReport" | "RecipeReport"
}

export interface NexusGenTypeInterfaces {
  ChefProfile: "Profile"
  ProfilePhoto: "Photo"
  ProfileReport: "Report"
  RecipePhoto: "Photo"
  RecipeReport: "Report"
  StepPhoto: "Photo"
  UserProfile: "Profile"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Photo" | "Profile" | "Report";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}